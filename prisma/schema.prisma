// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleTag {
  HR
  INTERVIEWER
  RECRUITER
  TRAINER
}

model SubRole {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  users       User[]              @relation("UserSubRole")
  level       Int
  permissions SubRolePermission[] // ðŸ‘ˆ This is the join relation
}

model Permission {
  id          String              @id @default(uuid())
  module      String
  action      String
  description String?
  roles       RolePermission[]
  users       UserPermission[]
  subRoles    SubRolePermission[] // ðŸ‘ˆ Join relation only

  @@unique([module, action], name: "module_action")
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId], name: "roleId_permissionId")
}

model SubRolePermission {
  id           String @id @default(cuid())
  subRoleId    String
  permissionId String

  subRole    SubRole    @relation(fields: [subRoleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([subRoleId, permissionId], name: "subRole_permission")
}

model UserPermission {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([userId, permissionId], name: "userId_permissionId")
}

model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String // store as string or JSON
  description String?
  updatedAt   DateTime @updatedAt
}

model Holiday {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  description String?
}

model SystemLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String // e.g., "Updated Shift", "Approved Leave"
  module    String // e.g., "Attendance"
  metadata  String? // optional JSON (e.g. { recordId: "xyz" })
  timestamp DateTime @default(now())
}

model DocumentCategory {
  id          String             @id @default(uuid())
  name        String             @unique
  description String?
  documents   employeeDocument[]
}

model employeeDocument {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  name       String
  url        String // File path or external link
  mimeType   String
  uploadedAt DateTime @default(now())
  type       String // e.g. "resume", "certificate", etc.

  categoryId String?
  category   DocumentCategory? @relation(fields: [categoryId], references: [id])
}

model LeaveBalance {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId String
  balance     Int
  updatedAt   DateTime  @updatedAt
}

model BulkUpload {
  id           String   @id @default(uuid())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  fileUrl      String
  type         String // e.g., "attendance"
  status       String // Processed, Failed, Pending
  uploadedAt   DateTime @default(now())
}

model User {
  id                    String                 @id @default(uuid())
  username              String                 @unique
  passwordHash          String
  email                 String                 @unique
  fullName              String
  role                  Role                   @relation(fields: [roleId], references: [id])
  roleId                String
  status                String
  dateJoined            DateTime               @default(now())
  lastLogin             DateTime?
  employee              Employee?
  approvedLeaves        LeaveRequest[]         @relation("ApprovedBy")
  approvedVacations     Vacation[]             @relation("ApprovedBy")
  assignedOnboarding    OnboardingProcess[]    @relation("AssignedHR")
  processedResignations Resignation[]          @relation("ProcessedBy")
  initiatedHRProcesses  HRProcess[]            @relation("InitiatedBy")
  UserPermission        UserPermission[]
  SystemLog             SystemLog[]
  BulkUpload            BulkUpload[]
  Resignation           Resignation[]
  subRoleId             String?
  subRole               SubRole?               @relation("UserSubRole", fields: [subRoleId], references: [id])
  roleTag               RoleTag?
  Notification          Notification[]
  AttendanceFixRequest  AttendanceFixRequest[]
  UserNotification      UserNotification[]
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  users          User[]
  RolePermission RolePermission[]
}

model SubDepartment {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  employees    Employee[]
}

model Employee {
  id                    String                 @id @default(uuid())
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String                 @unique
  employeeNumber        String                 @unique
  department            Department             @relation(fields: [departmentId], references: [id])
  departmentId          String
  subDepartment         SubDepartment?         @relation(fields: [subDepartmentId], references: [id])
  subDepartmentId       String?
  phoneNumber           String?
  shiftId               String?
  shift                 Shift?                 @relation(fields: [shiftId], references: [id])
  position              String
  fatherName            String?
  dateOfBirth           DateTime
  hireDate              DateTime
  status                String
  workLocation          String // Onsite, Remote, Hybrid
  gender                String
  address               String
  emergencyContactName  String
  emergencyContactPhone String
  salary                Decimal                @db.Decimal(10, 2)
  employeeImages        employeeImage[]
  employeeDocuments     employeeDocument[]
  skills                String? // JSON string of skills array
  manager               Employee?              @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId             String?
  managedEmployees      Employee[]             @relation("EmployeeManager")
  attendanceRecords     AttendanceRecord[]
  leaveRequests         LeaveRequest[]
  vacations             Vacation[]
  onboardingProcesses   OnboardingProcess[]
  resignations          Resignation[]
  assets                Asset[]
  hrProcesses           HRProcess[]
  LeaveBalance          LeaveBalance[]
  AttendanceFixRequest  AttendanceFixRequest[]
}

model employeeImage {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  name       String
  url        String // File path or external link (Cloudinary, S3, etc.)
  mimeType   String
  uploadedAt DateTime @default(now())
}

model Department {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String?
  employees      Employee[]
  subDepartments SubDepartment[]
}

model AttendanceRecord {
  id                   String                 @id @default(uuid())
  employee             Employee               @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId           String
  date                 DateTime
  clockIn              DateTime
  clockOut             DateTime?
  shift                Shift                  @relation(fields: [shiftId], references: [id])
  shiftId              String
  absenceReason        String?
  netWorkingMinutes    Int? // <-- Add this
  status               String
  breaks               Break[]
  AttendanceFixRequest AttendanceFixRequest[]
}

model Shift {
  id                String             @id @default(uuid())
  name              String             @unique
  startTime         DateTime
  endTime           DateTime
  description       String?
  attendanceRecords AttendanceRecord[]
  employees         Employee[]
}

model LeaveRequest {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   String
  leaveType    LeaveType @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId  String
  startDate    DateTime
  endDate      DateTime
  reason       String
  status       String
  requestedAt  DateTime  @default(now())
  approvedBy   User?     @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt   DateTime?
}

model LeaveType {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  isPaid        Boolean        @default(true)
  leaveRequests LeaveRequest[]
  LeaveBalance  LeaveBalance[]
}

model BreakType {
  id          String  @id @default(uuid())
  name        String  @unique
  duration    Int // duration in minutes (optional for fixed-length breaks)
  description String?
  breaks      Break[]
}

model Break {
  id                 String           @id @default(uuid())
  attendanceRecord   AttendanceRecord @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String
  breakStart         DateTime
  breakEnd           DateTime?
  breakTypeId        String?
  breakType          BreakType?       @relation(fields: [breakTypeId], references: [id])
}

model Vacation {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   String
  startDate    DateTime
  endDate      DateTime
  vacationType String
  status       String
  approvedBy   User      @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String
  approvedAt   DateTime?
}

model OnboardingProcess {
  id           String    @id @default(uuid())
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   String    @unique
  startDate    DateTime
  endDate      DateTime?
  status       String
  assignedHR   User      @relation("AssignedHR", fields: [assignedHRId], references: [id])
  assignedHRId String
  notes        String?
}

model Resignation {
  id                     String             @id @default(uuid())
  employee               Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId             String
  resignationDate        DateTime
  lastWorkingDay         DateTime
  reason                 String
  reviewComments         String?
  status                 String
  clearanceStatus        String
  assetReturnStatus      String
  processedBy            User?              @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById          String?
  processedAt            DateTime?
  clearanceResponsible   User?              @relation(fields: [clearanceResponsibleId], references: [id])
  clearanceResponsibleId String?
  assets                 ResignationAsset[]
}

model Asset {
  id                String             @id @default(uuid())
  name              String
  description       String?
  serialNumber      String             @unique
  assignedTo        Employee           @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId      String
  status            String
  resignationAssets ResignationAsset[]
}

model ResignationAsset {
  id            String      @id @default(uuid())
  resignation   Resignation @relation(fields: [resignationId], references: [id])
  resignationId String
  asset         Asset       @relation(fields: [assetId], references: [id])
  assetId       String
  returnStatus  String
  returnDate    DateTime?
}

model HRProcess {
  id            String    @id @default(uuid())
  processType   String
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId    String
  initiatedBy   User      @relation("InitiatedBy", fields: [initiatedById], references: [id])
  initiatedById String
  startDate     DateTime
  endDate       DateTime?
  status        String
  notes         String?
}

enum NotificationScope {
  DIRECT
  TEAMLEADS_SUBDEPT
  MANAGERS_DEPT
  DIRECTORS_HR
}

model Notification {
  id              String             @id @default(uuid())
  title           String
  message         String
  type            String
  createdAt       DateTime           @default(now())
  visibilityLevel Int?
  departmentId    String?
  subDepartmentId String?
  employeeId      String?
  scope           NotificationScope?

  userNotifications UserNotification[] // ðŸ‘ˆ new relation
  User              User?              @relation(fields: [userId], references: [id])
  userId            String?
}

model UserNotification {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  read           Boolean      @default(false)
  readAt         DateTime?
}

model AttendanceFixRequest {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String

  requestType       String // "CheckIn", "CheckOut", "Both", etc.
  requestedCheckIn  DateTime? // Optional: requested fixed clockIn
  requestedCheckOut DateTime? // Optional: requested fixed clockOut
  requestedBreaks   Json? // Optional JSON for break updates if needed

  reason      String
  status      String // "Pending", "Approved", "Rejected"
  requestedAt DateTime @default(now())

  reviewedBy   User?     @relation(fields: [reviewedById], references: [id])
  reviewedById String?
  reviewedAt   DateTime?

  remarks            String? // Optional comment from reviewer
  AttendanceRecord   AttendanceRecord? @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String?
}
