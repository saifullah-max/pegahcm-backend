// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  passwordHash  String
  email         String    @unique
  fullName      String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
  status        String
  dateJoined    DateTime  @default(now())
  lastLogin     DateTime?
  employee      Employee?
  approvedLeaves LeaveRequest[] @relation("ApprovedBy")
  approvedVacations Vacation[] @relation("ApprovedBy")
  assignedOnboarding OnboardingProcess[] @relation("AssignedHR")
  processedResignations Resignation[] @relation("ProcessedBy")
  initiatedHRProcesses HRProcess[] @relation("InitiatedBy")
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  users       User[]
}

model SubDepartment {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  employees   Employee[]
}

model Employee {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  employeeNumber  String    @unique
  department      Department @relation(fields: [departmentId], references: [id])
  departmentId    String
  subDepartment   SubDepartment? @relation(fields: [subDepartmentId], references: [id])
  subDepartmentId String?
  position        String
  fatherName      String
  dateOfBirth     DateTime
  hireDate        DateTime
  status          String
  workLocation    String    // Onsite, Remote, Hybrid
  gender          String
  address         String
  emergencyContactName String
  emergencyContactPhone String
  salary          Decimal   @db.Decimal(10, 2)
  profileImage    String?
  documents       String?   // JSON string of documents array
  skills          String?   // JSON string of skills array
  manager         Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId       String?
  managedEmployees Employee[] @relation("EmployeeManager")
  attendanceRecords AttendanceRecord[]
  leaveRequests   LeaveRequest[]
  vacations       Vacation[]
  onboardingProcesses OnboardingProcess[]
  resignations    Resignation[]
  assets          Asset[]
  hrProcesses     HRProcess[]
}

model Department {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  employees   Employee[]
  subDepartments SubDepartment[]
}

model AttendanceRecord {
  id            String    @id @default(uuid())
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    String
  date          DateTime
  clockIn       DateTime
  clockOut      DateTime?
  shift         Shift     @relation(fields: [shiftId], references: [id])
  shiftId       String
  absenceReason String?
  status        String
  breaks        Break[]
}

model Break {
  id                String    @id @default(uuid())
  attendanceRecord  AttendanceRecord @relation(fields: [attendanceRecordId], references: [id])
  attendanceRecordId String
  breakStart        DateTime
  breakEnd          DateTime?
  breakType         String
}

model Shift {
  id          String    @id @default(uuid())
  name        String    @unique
  startTime   DateTime
  endTime     DateTime
  description String?
  attendanceRecords AttendanceRecord[]
}

model LeaveRequest {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      String
  requestedAt DateTime  @default(now())
  approvedBy  User      @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String
  approvedAt  DateTime?
}

model LeaveType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isPaid      Boolean   @default(true)
  leaveRequests LeaveRequest[]
}

model Vacation {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  vacationType String
  status      String
  approvedBy  User      @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedById String
  approvedAt  DateTime?
}

model OnboardingProcess {
  id          String    @id @default(uuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  startDate   DateTime
  endDate     DateTime?
  status      String
  assignedHR  User      @relation("AssignedHR", fields: [assignedHRId], references: [id])
  assignedHRId String
  notes       String?
}

model Resignation {
  id              String    @id @default(uuid())
  employee        Employee  @relation(fields: [employeeId], references: [id])
  employeeId      String
  resignationDate DateTime
  lastWorkingDay  DateTime
  reason          String
  status          String
  clearanceStatus String
  assetReturnStatus String
  processedBy     User      @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById   String
  processedAt     DateTime?
  assets          ResignationAsset[]
}

model Asset {
  id          String    @id @default(uuid())
  name        String
  description String?
  serialNumber String   @unique
  assignedTo  Employee  @relation(fields: [assignedToId], references: [id])
  assignedToId String
  status      String
  resignationAssets ResignationAsset[]
}

model ResignationAsset {
  id            String    @id @default(uuid())
  resignation   Resignation @relation(fields: [resignationId], references: [id])
  resignationId String
  asset         Asset     @relation(fields: [assetId], references: [id])
  assetId       String
  returnStatus  String
  returnDate    DateTime?
}

model HRProcess {
  id          String    @id @default(uuid())
  processType String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  initiatedBy User      @relation("InitiatedBy", fields: [initiatedById], references: [id])
  initiatedById String
  startDate   DateTime
  endDate     DateTime?
  status      String
  notes       String?
}
